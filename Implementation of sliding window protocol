#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <stdbool.h>

#define PORT 65432
#define BUFFER_SIZE 1024
#define WINDOW_SIZE 4
#define TOTAL_FRAMES 10

void send_frame(int sockfd, struct sockaddr_in *addr, int frame_num) {
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "Frame %d", frame_num);
    sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *) addr, sizeof(*addr));
    printf("Sent: %s\n", buffer);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    int base = 0;  // Base of the window
    int next_frame = 0;  // Next frame to be sent

    // Create a UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Define server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    // Send frames
    while (next_frame < TOTAL_FRAMES) {
        // Send all frames in the current window
        while (next_frame < base + WINDOW_SIZE && next_frame < TOTAL_FRAMES) {
            send_frame(sockfd, &server_addr, next_frame);
            next_frame++;
        }

        // Wait for acknowledgment (simulate by user input for this example)
        printf("Waiting for acknowledgment...\n");
        sleep(2);  // Simulate wait time
        base = next_frame;  // Move window
    }

    close(sockfd);
    return 0;
}
